// Generated by gencpp from file polygon_coverage_msgs/PolygonWithHoles.msg
// DO NOT EDIT!


#ifndef POLYGON_COVERAGE_MSGS_MESSAGE_POLYGONWITHHOLES_H
#define POLYGON_COVERAGE_MSGS_MESSAGE_POLYGONWITHHOLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Polygon.h>
#include <geometry_msgs/Polygon.h>

namespace polygon_coverage_msgs
{
template <class ContainerAllocator>
struct PolygonWithHoles_
{
  typedef PolygonWithHoles_<ContainerAllocator> Type;

  PolygonWithHoles_()
    : hull()
    , holes()  {
    }
  PolygonWithHoles_(const ContainerAllocator& _alloc)
    : hull(_alloc)
    , holes(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _hull_type;
  _hull_type hull;

   typedef std::vector< ::geometry_msgs::Polygon_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Polygon_<ContainerAllocator> >::other >  _holes_type;
  _holes_type holes;





  typedef boost::shared_ptr< ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator> const> ConstPtr;

}; // struct PolygonWithHoles_

typedef ::polygon_coverage_msgs::PolygonWithHoles_<std::allocator<void> > PolygonWithHoles;

typedef boost::shared_ptr< ::polygon_coverage_msgs::PolygonWithHoles > PolygonWithHolesPtr;
typedef boost::shared_ptr< ::polygon_coverage_msgs::PolygonWithHoles const> PolygonWithHolesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator1> & lhs, const ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator2> & rhs)
{
  return lhs.hull == rhs.hull &&
    lhs.holes == rhs.holes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator1> & lhs, const ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace polygon_coverage_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "172a5c8423a33d0cd317c84e16aead83";
  }

  static const char* value(const ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x172a5c8423a33d0cULL;
  static const uint64_t static_value2 = 0xd317c84e16aead83ULL;
};

template<class ContainerAllocator>
struct DataType< ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "polygon_coverage_msgs/PolygonWithHoles";
  }

  static const char* value(const ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A message to define a polygon with holes.\n"
"geometry_msgs/Polygon hull\n"
"geometry_msgs/Polygon[] holes\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hull);
      stream.next(m.holes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PolygonWithHoles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::polygon_coverage_msgs::PolygonWithHoles_<ContainerAllocator>& v)
  {
    s << indent << "hull: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.hull);
    s << indent << "holes[]" << std::endl;
    for (size_t i = 0; i < v.holes.size(); ++i)
    {
      s << indent << "  holes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "    ", v.holes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // POLYGON_COVERAGE_MSGS_MESSAGE_POLYGONWITHHOLES_H
