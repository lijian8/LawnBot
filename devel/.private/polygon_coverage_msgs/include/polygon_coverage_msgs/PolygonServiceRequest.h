// Generated by gencpp from file polygon_coverage_msgs/PolygonServiceRequest.msg
// DO NOT EDIT!


#ifndef POLYGON_COVERAGE_MSGS_MESSAGE_POLYGONSERVICEREQUEST_H
#define POLYGON_COVERAGE_MSGS_MESSAGE_POLYGONSERVICEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <polygon_coverage_msgs/PolygonWithHolesStamped.h>

namespace polygon_coverage_msgs
{
template <class ContainerAllocator>
struct PolygonServiceRequest_
{
  typedef PolygonServiceRequest_<ContainerAllocator> Type;

  PolygonServiceRequest_()
    : polygon()  {
    }
  PolygonServiceRequest_(const ContainerAllocator& _alloc)
    : polygon(_alloc)  {
  (void)_alloc;
    }



   typedef  ::polygon_coverage_msgs::PolygonWithHolesStamped_<ContainerAllocator>  _polygon_type;
  _polygon_type polygon;





  typedef boost::shared_ptr< ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PolygonServiceRequest_

typedef ::polygon_coverage_msgs::PolygonServiceRequest_<std::allocator<void> > PolygonServiceRequest;

typedef boost::shared_ptr< ::polygon_coverage_msgs::PolygonServiceRequest > PolygonServiceRequestPtr;
typedef boost::shared_ptr< ::polygon_coverage_msgs::PolygonServiceRequest const> PolygonServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator1> & lhs, const ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.polygon == rhs.polygon;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator1> & lhs, const ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace polygon_coverage_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ded2f55b70e30d5b47a2955e617ba1a7";
  }

  static const char* value(const ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xded2f55b70e30d5bULL;
  static const uint64_t static_value2 = 0x47a2955e617ba1a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "polygon_coverage_msgs/PolygonServiceRequest";
  }

  static const char* value(const ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A service to set a new polygon with holes.\n"
"# Request fields:\n"
"polygon_coverage_msgs/PolygonWithHolesStamped polygon # The new polygon.\n"
"\n"
"================================================================================\n"
"MSG: polygon_coverage_msgs/PolygonWithHolesStamped\n"
"# A stamped polygon with holes.\n"
"std_msgs/Header header\n"
"polygon_coverage_msgs/PolygonWithHoles polygon\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: polygon_coverage_msgs/PolygonWithHoles\n"
"# A message to define a polygon with holes.\n"
"geometry_msgs/Polygon hull\n"
"geometry_msgs/Polygon[] holes\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.polygon);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PolygonServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::polygon_coverage_msgs::PolygonServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "polygon: ";
    s << std::endl;
    Printer< ::polygon_coverage_msgs::PolygonWithHolesStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.polygon);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POLYGON_COVERAGE_MSGS_MESSAGE_POLYGONSERVICEREQUEST_H
